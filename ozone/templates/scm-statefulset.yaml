# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: scm
  labels:
    app.kubernetes.io/component: ozone
spec:
  selector:
    matchLabels:
      app: ozone
      component: scm
  serviceName: scm
  replicas: {{ .Values.scm.replicas }}
  template:
    metadata:
      labels:
        app: ozone
        component: scm
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9876"
        prometheus.io/path: /prom
    spec:
      securityContext:
        fsGroup: 1234
      initContainers:
      - name: init
        image: '{{ .Values.image.name }}:{{ .Values.image.version }}'
        args:
        - ozone
        - scm
        - --init
        envFrom:
        - configMapRef:
            name: config
        volumeMounts:
        - name: data
          mountPath: /data
      containers:
      - name: scm
        image: '{{ .Values.image.name }}:{{ .Values.image.version }}'
        #command: ["/bin/bash", "-c", "--"]
        #args: [ "while true; do sleep 10000; done;"]
        args:
        - ozone
        - scm
        livenessProbe:
          tcpSocket:
            port: 9861
          initialDelaySeconds: 30
        envFrom:
        - configMapRef:
            name: config
        volumeMounts:
        - name: data
          mountPath: /data
        {{- if and .Values.security.enabled (eq .Values.security.authentication "kerberos") }}
        - name: scm-keytab
          mountPath: {{ dir .Values.scm.security.kerberos.keytab.path }}
        - name: krb5-conf
          mountPath: /etc/krb5.conf
          subPath: krb5.conf
        {{- end }}
      volumes:
      {{- if and .Values.security.enabled (eq .Values.security.authentication "kerberos") }}
      - name: scm-keytab
        secret:
          secretName: scm-keytab
          items:
          - key: {{ base .Values.scm.security.kerberos.keytab.path }}
            path: {{ base .Values.scm.security.kerberos.keytab.path }}
      - name: krb5-conf
        configMap:
          name: krb5-conf
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.scm.volume.storage }}
